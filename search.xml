<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[hexo指令]]></title>
      <url>%2F2017%2F04%2F19%2Fhexo%2F</url>
      <content type="text"><![CDATA[init1$ hexo init [folder] 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 new1$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 generate1$ hexo generate 生成静态文件。 选项 描述 -d, --deploy 文件生成后立即部署网站 -w, --watch 监视文件变动 该命令可以简写为1$ hexo g publish1$ hexo publish [layout] &lt;filename&gt; 发表草稿。 server1$ hexo server 启动服务器。默认情况下，访问网址为： http://localhost:4000/。 选项 描述 -p, --port 重设端口 -s, --static 只使用静态文件 -l, --log 启动日记记录，使用覆盖记录格式 deploy1$ hexo deploy 部署网站。 参数 描述 -g, --generate 部署之前预先生成静态文件 该命令可以简写为：1$ hexo d render1$ hexo render &lt;file1&gt; [file2] ... 渲染文件。 参数 描述 -o, --output 设置输出路径 migrate1$ hexo migrate &lt;type&gt; 从其他博客系统 迁移内容。 clean1$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 list1$ hexo list &lt;type&gt; 列出网站资料。 version1$ hexo version 显示 Hexo 版本。 选项安全模式1$ hexo --safe 在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。 调试模式1$ hexo --debug 在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。 简洁模式1$ hexo --silent 隐藏终端信息。 自定义配置文件的路径1$ hexo --config custom.yml 自定义配置文件的路径，执行后将不再使用 _config.yml。 显示草稿1$ hexo --draft 显示 source/_drafts 文件夹中的草稿文章。 自定义 CWD1$ hexo --cwd /path/to/cwd 自定义当前工作目录（Current working directory）的路径。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[nrm切换npm源利器]]></title>
      <url>%2F2017%2F04%2F19%2Fnrm%2F</url>
      <content type="text"><![CDATA[在使用npm时，官方的源下载npm包会比较慢，国内我们基本使用淘宝的源，最近公司内部搭建了一套npm私有仓库。要添加自己公司内部的npm源，公司内部的源不可能把npm官方的npm包都全量同步，故需要npm源之间的切换，如果使用npm registry xxx的话，太不好管理了。nrm是管理npm源切换的利器。使用方法如下： 首先安装nrm包：1npm install -g nrm 查看nrm帮助：1nrm -h | -help 1234567891011121314151617Usage: cli [options] [command]Commands: ls List all the registries current Show current registry name use &lt;registry&gt; Change registry to registry add &lt;registry&gt; &lt;url&gt; [home] Add one custom registry del &lt;registry&gt; Delete one custom registry home &lt;registry&gt; [browser] Open the homepage of registry with optional browser test [registry] Show response time for specific or all registries help Print this helpOptions: -h, --help output usage information -V, --version output the version number 主要使用ls和use命令： nrm ls 是列出来现在已经配置好的所有的源地址； 1nrm ls 1234567* npm ---- https://registry.npmjs.org/ cnpm --- http://r.cnpmjs.org/ taobao - https://registry.npm.taobao.org/ nj ----- https://registry.nodejitsu.com/ rednpm - http://registry.mirror.cqupt.edu.cn/ npmMirror https://skimdb.npmjs.com/registry/ edunpm - http://registry.enpmjs.org/ nrm use 是切换到哪个源上； 1nrm usr taobao nrm add 添加源； 1nrm add abc https://abc.npmjs.org 12345678 npm ---- https://registry.npmjs.org/ cnpm --- http://r.cnpmjs.org/* taobao - https://registry.npm.taobao.org/ nj ----- https://registry.nodejitsu.com/ rednpm - http://registry.mirror.cqupt.edu.cn/ npmMirror https://skimdb.npmjs.com/registry/ edunpm - http://registry.enpmjs.org/ abc ---- https://abc.npmjs.org/ [新添加的镜像源] nrm del 删除源； 1nrm del abc nrm test 测试源的响应时间，可以作为使用哪个源的参考； 1nrm test 1234567 npm ---- 2105ms cnpm --- 313ms* taobao - 266ms nj ----- Fetch Error rednpm - 425ms npmMirror 3561ms edunpm - Fetch Error]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular 快速上手]]></title>
      <url>%2F2017%2F02%2F10%2Fng2-chapter-1%2F</url>
      <content type="text"><![CDATA[内容提要第一块内容：Angular-CLI安装配置Angular CLI主要特性 在开发中，搭建一个良好的前端架构非常重要，他对后续的开发，维护，团队协作，易读性具有重要意义 Angular CLI 可以快速搭建框架，创建module，service，class，directive等； 具有webpack的功能，代码分割（code splitting），按需加载； 代码打包压缩； 模块测试，端到端测试； 热部署，有改动立即重新编译，不用刷新浏览器；而且速度很快 有开发环境，测试环境，生产环境的配置，不用自己操心； sass，less的预编译Angular CLI都会自动识别后缀来编译； typescript的配置，Angular CLI在创建应用时都可以自己配置； 在创建好的工程也可以做一些个性化的配置，webpack的具体配置还不支持，未来可能会增加； Angular CLI创建的工程结构是最佳实践，生产可用； 安装 Angular CLI123npm install -g angular-cli // 需要翻墙你懂的！ng --versionng help 创建Aangular2工程1ng new project_name // project_name是你的项目名； 启动Aangular2工程123cd project_name ng serve // 运行ng serve --port 4201 --live-reload-port 49153 // 也可以指定运行 CLI操作命令123456789ng generate component my-new-component // 全写 快速生产组件ng g c my-new-component // 简写 g:generate | c:componentng g directive my-new-directive // d:Directiveng g pipe my-new-pipe // p:Pipeng g service my-new-service // s:Serviceng g interface my-new-interface // Interfaceng g enum my-new-enum // e:Enumng g module my-module // m:Module CLI测试123CLI 实现了 Karma 和 e2e 两种测试ng test // karmang e2e // e2e 第二块内容：Angualr中的3大核心概念 Component、Module、Route 第三块内容：Angualr核心架构思想 组件化、依赖注入DI、数据绑定 第四块内容：UI库 Angular-Material、Prime-NG、ng2-bootstrap、ionic2 第五块内容：NiceFish]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Angular 章节目录]]></title>
      <url>%2F2017%2F02%2F10%2Fng2-list%2F</url>
      <content type="text"><![CDATA[ALL-IN-ONE 平台Angular就是前端开发领域的“宜家套装”，它经过精心的前期设计，涵盖了开发的各个层面，层与层之间都经过了精心调适， 是一个“开箱即用”的框架。你只管在前台秀肌肉吧！剩下的，让Angular在幕后帮你搞定！ 课程大纲（更新）第一节：Angular快速上手第二节：搭建开发环境 angular-CLI 、webpack 第三节：组件与指令 组件与指令、模板、数据绑定与事件绑定、组件间通讯、生命周期、动效、服务、管道 第四节：模块与共享模块第五节：路由与动态加载 基本用法、多层嵌套、动态加载模块、路由守卫 第六节：表单与数据校验第七节：与服务端通讯 Observable与RxJS 第八节：i18n（国际化）第九节：前端自动化测试第十节：高阶内容 WebWorker、ServiceWorker、SEO与Universal、ionic、PWA]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ubuntu 常用命令]]></title>
      <url>%2F2017%2F02%2F09%2Fubuntu-command%2F</url>
      <content type="text"><![CDATA[文件/文件夹管理 列出当前目录文件（不包括隐含文件） 1ls 列出当前目录文件（包括隐含文件） 1ls -a 列出当前目录下文件的详细信息 1ls -l 回当前目录的上一级目录 1cd .. 回上一次所在的目录 1cd - 或 cd 回当前用户的宿主目录 1cd ~ 目录名 创建一个目录 1mkdir 空目录名 删除一个空目录 1rmdir 文件名 文件名 删除一个文件或多个文件 1rm 非空目录名 删除一个非空目录下的一切 1rm -rf 路经/文件 /经/文件移动相对路经下的文件到绝对路经下 1mv 文件名 新名称 在当前目录下改名 1mv 路经 -name “字符串” 查找路经所在范围内满足字符串匹配的文件和目录 1find]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ionic2.0.1发布，漂亮的 HTML5 移动应用框架]]></title>
      <url>%2F2017%2F02%2F08%2Fionic2-0-1%2F</url>
      <content type="text"><![CDATA[Ionic 2.0.1 发布了，Ionic Framework 是个高级的 HTML5 移动端应用框架，是个很漂亮的使用 HTML5 开发混合移动应用前端框架。 更新内容Bug 修复-chip： 在中心对齐图标 -content:：在 read dimensions 时检查 this._scroll -datetime:：设置不带 formControlName 的 input-has-value 类 -input:：添加警报和输入占位符颜色的变量 -input：禁用时不允许聚焦 -platform：正确检测 iPad Pro -toggle/checkbox：允许值在禁用时进行程序化更新 特性-input: 添加 max，min，step 并传递给 native 详情查看：发行日志]]></content>
    </entry>

    
  
  
</search>
